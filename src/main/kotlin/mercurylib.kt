// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Callback
import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.*
import kotlinx.serialization.Serializable
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicLong

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0

    @JvmField var len: Long = 0

    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue

    class ByReference : RustBuffer(), Structure.ByReference

    internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) =
            uniffiRustCall { status ->
                // Note: need to convert the size to a `Long` value to make this work with JVM.
                UniffiLib.INSTANCE.ffi_mercurylib_rustbuffer_alloc(size.toLong(), status)
            }.also {
                if (it.data == null) {
                    throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=$size)")
                }
            }

        internal fun create(
            capacity: ULong,
            len: ULong,
            data: Pointer?,
        ): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) =
            uniffiRustCall { status ->
                UniffiLib.INSTANCE.ffi_mercurylib_rustbuffer_free(buf, status)
            }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(
        value: KotlinType,
        buf: ByteBuffer,
    )

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf =
                rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                    it.order(ByteOrder.BIG_ENDIAN)
                }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
            val item = read(byteBuf)
            if (byteBuf.hasRemaining()) {
                throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
            }
            return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType> : FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)

    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0

    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue : UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(
            code: Byte,
            errorBuf: RustBuffer.ByValue,
        ): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E : Exception> uniffiRustCallWithError(
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
    callback: (UniffiRustCallStatus) -> U,
): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun <E : Exception> uniffiCheckCallStatus(
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
    status: UniffiRustCallStatus,
) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object UniffiNullRustCallStatusErrorHandler : UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun <T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch (e: Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun <T, reified E : Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue,
) {
    try {
        writeReturn(makeCall())
    } catch (e: Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}

// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T : Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "mercurylib"
}

private inline fun <reified Lib : Library> loadIndirect(componentName: String): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(
        `data`: Long,
        `pollResult`: Byte,
    )
}

internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long)
}

internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long)
}

@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ) : UniffiForeignFuture(`handle`, `free`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU8(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU8.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI8(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI8.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU16(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU16.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI16(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI16.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU32(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI32(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU64(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI64(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructF32(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructF32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructF64(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructF64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructPointer(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructPointer.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructRustBuffer(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,
    )
}

@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructVoid(`callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructVoid.UniffiByValue,
    )
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "mercurylib")
                .also { lib: UniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
        }
    }

    fun uniffi_mercurylib_fn_func_generate_mnemonic(uniffi_out_err: UniffiRustCallStatus): RustBuffer.ByValue

    fun ffi_mercurylib_rustbuffer_alloc(
        `size`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_mercurylib_rustbuffer_from_bytes(
        `bytes`: ForeignBytes.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_mercurylib_rustbuffer_free(
        `buf`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun ffi_mercurylib_rustbuffer_reserve(
        `buf`: RustBuffer.ByValue,
        `additional`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_mercurylib_rust_future_poll_u8(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_u8(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_u8(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_u8(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_mercurylib_rust_future_poll_i8(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_i8(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_i8(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_i8(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_mercurylib_rust_future_poll_u16(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_u16(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_u16(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_u16(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Short

    fun ffi_mercurylib_rust_future_poll_i16(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_i16(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_i16(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_i16(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Short

    fun ffi_mercurylib_rust_future_poll_u32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_u32(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_u32(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_u32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun ffi_mercurylib_rust_future_poll_i32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_i32(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_i32(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_i32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun ffi_mercurylib_rust_future_poll_u64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_u64(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_u64(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_u64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun ffi_mercurylib_rust_future_poll_i64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_i64(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_i64(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_i64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun ffi_mercurylib_rust_future_poll_f32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_f32(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_f32(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_f32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Float

    fun ffi_mercurylib_rust_future_poll_f64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_f64(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_f64(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_f64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Double

    fun ffi_mercurylib_rust_future_poll_pointer(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_pointer(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_pointer(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_pointer(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun ffi_mercurylib_rust_future_poll_rust_buffer(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_rust_buffer(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_rust_buffer(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_rust_buffer(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_mercurylib_rust_future_poll_void(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_void(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_void(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_void(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_mercurylib_checksum_func_generate_mnemonic(): Short

    fun ffi_mercurylib_uniffi_contract_version(): Int
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_mercurylib_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_mercurylib_checksum_func_generate_mnemonic() != 62910.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.

// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()

    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** Used to instantiate an interface without an actual pointer, for fakes in tests, mostly. */
object NoPointer

public object FfiConverterUInt : FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(
        value: UInt,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong : FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(
        value: ULong,
        buf: ByteBuffer,
    ) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterBoolean : FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(
        value: Boolean,
        buf: ByteBuffer,
    ) {
        buf.put(lower(value))
    }
}

public object FfiConverterString : FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(
        value: String,
        buf: ByteBuffer,
    ) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

@Serializable
data class Activity(
    var `utxo`: kotlin.String,
    var `amount`: kotlin.UInt,
    var `action`: kotlin.String,
    var `date`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeActivity : FfiConverterRustBuffer<Activity> {
    override fun read(buf: ByteBuffer): Activity {
        return Activity(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Activity) =
        (
            FfiConverterString.allocationSize(value.`utxo`) +
                FfiConverterUInt.allocationSize(value.`amount`) +
                FfiConverterString.allocationSize(value.`action`) +
                FfiConverterString.allocationSize(value.`date`)
        )

    override fun write(
        value: Activity,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`utxo`, buf)
        FfiConverterUInt.write(value.`amount`, buf)
        FfiConverterString.write(value.`action`, buf)
        FfiConverterString.write(value.`date`, buf)
    }
}

data class BackupTx(
    var `txN`: kotlin.UInt,
    var `tx`: kotlin.String,
    var `clientPublicNonce`: kotlin.String,
    var `serverPublicNonce`: kotlin.String,
    var `clientPublicKey`: kotlin.String,
    var `serverPublicKey`: kotlin.String,
    var `blindingFactor`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeBackupTx : FfiConverterRustBuffer<BackupTx> {
    override fun read(buf: ByteBuffer): BackupTx {
        return BackupTx(
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: BackupTx) =
        (
            FfiConverterUInt.allocationSize(value.`txN`) +
                FfiConverterString.allocationSize(value.`tx`) +
                FfiConverterString.allocationSize(value.`clientPublicNonce`) +
                FfiConverterString.allocationSize(value.`serverPublicNonce`) +
                FfiConverterString.allocationSize(value.`clientPublicKey`) +
                FfiConverterString.allocationSize(value.`serverPublicKey`) +
                FfiConverterString.allocationSize(value.`blindingFactor`)
        )

    override fun write(
        value: BackupTx,
        buf: ByteBuffer,
    ) {
        FfiConverterUInt.write(value.`txN`, buf)
        FfiConverterString.write(value.`tx`, buf)
        FfiConverterString.write(value.`clientPublicNonce`, buf)
        FfiConverterString.write(value.`serverPublicNonce`, buf)
        FfiConverterString.write(value.`clientPublicKey`, buf)
        FfiConverterString.write(value.`serverPublicKey`, buf)
        FfiConverterString.write(value.`blindingFactor`, buf)
    }
}

@Serializable
data class Coin(
    var `index`: kotlin.UInt,
    var `userPrivkey`: kotlin.String,
    var `userPubkey`: kotlin.String,
    var `authPrivkey`: kotlin.String,
    var `authPubkey`: kotlin.String,
    var `derivationPath`: kotlin.String,
    var `fingerprint`: kotlin.String,
    /**
     * The coin address is the user_pubkey || auth_pubkey
     * Used to transfer the coin to another wallet
     */
    var `address`: kotlin.String,
    /**
     * The backup address is the address used in backup transactions
     * The backup address is the p2tr address of the user_pubkey
     */
    var `backupAddress`: kotlin.String,
    var `serverPubkey`: kotlin.String?,
    var `aggregatedPubkey`: kotlin.String?,
    /**
     * The aggregated address is the P2TR address from aggregated_pubkey
     */
    var `aggregatedAddress`: kotlin.String?,
    var `utxoTxid`: kotlin.String?,
    var `utxoVout`: kotlin.UInt?,
    var `amount`: kotlin.UInt?,
    var `statechainId`: kotlin.String?,
    var `signedStatechainId`: kotlin.String?,
    var `locktime`: kotlin.UInt?,
    var `secretNonce`: kotlin.String?,
    var `publicNonce`: kotlin.String?,
    var `blindingFactor`: kotlin.String?,
    var `serverPublicNonce`: kotlin.String?,
    var `txCpfp`: kotlin.String?,
    var `txWithdraw`: kotlin.String?,
    var `withdrawalAddress`: kotlin.String?,
    var `status`: CoinStatus,
) {
    companion object
}

public object FfiConverterTypeCoin : FfiConverterRustBuffer<Coin> {
    override fun read(buf: ByteBuffer): Coin {
        return Coin(
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterTypeCoinStatus.read(buf),
        )
    }

    override fun allocationSize(value: Coin) =
        (
            FfiConverterUInt.allocationSize(value.`index`) +
                FfiConverterString.allocationSize(value.`userPrivkey`) +
                FfiConverterString.allocationSize(value.`userPubkey`) +
                FfiConverterString.allocationSize(value.`authPrivkey`) +
                FfiConverterString.allocationSize(value.`authPubkey`) +
                FfiConverterString.allocationSize(value.`derivationPath`) +
                FfiConverterString.allocationSize(value.`fingerprint`) +
                FfiConverterString.allocationSize(value.`address`) +
                FfiConverterString.allocationSize(value.`backupAddress`) +
                FfiConverterOptionalString.allocationSize(value.`serverPubkey`) +
                FfiConverterOptionalString.allocationSize(value.`aggregatedPubkey`) +
                FfiConverterOptionalString.allocationSize(value.`aggregatedAddress`) +
                FfiConverterOptionalString.allocationSize(value.`utxoTxid`) +
                FfiConverterOptionalUInt.allocationSize(value.`utxoVout`) +
                FfiConverterOptionalUInt.allocationSize(value.`amount`) +
                FfiConverterOptionalString.allocationSize(value.`statechainId`) +
                FfiConverterOptionalString.allocationSize(value.`signedStatechainId`) +
                FfiConverterOptionalUInt.allocationSize(value.`locktime`) +
                FfiConverterOptionalString.allocationSize(value.`secretNonce`) +
                FfiConverterOptionalString.allocationSize(value.`publicNonce`) +
                FfiConverterOptionalString.allocationSize(value.`blindingFactor`) +
                FfiConverterOptionalString.allocationSize(value.`serverPublicNonce`) +
                FfiConverterOptionalString.allocationSize(value.`txCpfp`) +
                FfiConverterOptionalString.allocationSize(value.`txWithdraw`) +
                FfiConverterOptionalString.allocationSize(value.`withdrawalAddress`) +
                FfiConverterTypeCoinStatus.allocationSize(value.`status`)
        )

    override fun write(
        value: Coin,
        buf: ByteBuffer,
    ) {
        FfiConverterUInt.write(value.`index`, buf)
        FfiConverterString.write(value.`userPrivkey`, buf)
        FfiConverterString.write(value.`userPubkey`, buf)
        FfiConverterString.write(value.`authPrivkey`, buf)
        FfiConverterString.write(value.`authPubkey`, buf)
        FfiConverterString.write(value.`derivationPath`, buf)
        FfiConverterString.write(value.`fingerprint`, buf)
        FfiConverterString.write(value.`address`, buf)
        FfiConverterString.write(value.`backupAddress`, buf)
        FfiConverterOptionalString.write(value.`serverPubkey`, buf)
        FfiConverterOptionalString.write(value.`aggregatedPubkey`, buf)
        FfiConverterOptionalString.write(value.`aggregatedAddress`, buf)
        FfiConverterOptionalString.write(value.`utxoTxid`, buf)
        FfiConverterOptionalUInt.write(value.`utxoVout`, buf)
        FfiConverterOptionalUInt.write(value.`amount`, buf)
        FfiConverterOptionalString.write(value.`statechainId`, buf)
        FfiConverterOptionalString.write(value.`signedStatechainId`, buf)
        FfiConverterOptionalUInt.write(value.`locktime`, buf)
        FfiConverterOptionalString.write(value.`secretNonce`, buf)
        FfiConverterOptionalString.write(value.`publicNonce`, buf)
        FfiConverterOptionalString.write(value.`blindingFactor`, buf)
        FfiConverterOptionalString.write(value.`serverPublicNonce`, buf)
        FfiConverterOptionalString.write(value.`txCpfp`, buf)
        FfiConverterOptionalString.write(value.`txWithdraw`, buf)
        FfiConverterOptionalString.write(value.`withdrawalAddress`, buf)
        FfiConverterTypeCoinStatus.write(value.`status`, buf)
    }
}

class CoinStatusParseError {
    override fun equals(other: Any?): Boolean {
        return other is CoinStatusParseError
    }

    override fun hashCode(): Int {
        return javaClass.hashCode()
    }

    companion object
}

public object FfiConverterTypeCoinStatusParseError : FfiConverterRustBuffer<CoinStatusParseError> {
    override fun read(buf: ByteBuffer): CoinStatusParseError {
        return CoinStatusParseError()
    }

    override fun allocationSize(value: CoinStatusParseError) = 0UL

    override fun write(
        value: CoinStatusParseError,
        buf: ByteBuffer,
    ) {
    }
}

data class InfoConfig(
    var `initlock`: kotlin.UInt,
    var `interval`: kotlin.UInt,
    var `feeRateSatsPerByte`: kotlin.ULong,
) {
    companion object
}

public object FfiConverterTypeInfoConfig : FfiConverterRustBuffer<InfoConfig> {
    override fun read(buf: ByteBuffer): InfoConfig {
        return InfoConfig(
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: InfoConfig) =
        (
            FfiConverterUInt.allocationSize(value.`initlock`) +
                FfiConverterUInt.allocationSize(value.`interval`) +
                FfiConverterULong.allocationSize(value.`feeRateSatsPerByte`)
        )

    override fun write(
        value: InfoConfig,
        buf: ByteBuffer,
    ) {
        FfiConverterUInt.write(value.`initlock`, buf)
        FfiConverterUInt.write(value.`interval`, buf)
        FfiConverterULong.write(value.`feeRateSatsPerByte`, buf)
    }
}

data class KeyListResponsePayload(
    var `listKeyinfo`: List<PubKeyInfo>,
) {
    companion object
}

public object FfiConverterTypeKeyListResponsePayload : FfiConverterRustBuffer<KeyListResponsePayload> {
    override fun read(buf: ByteBuffer): KeyListResponsePayload {
        return KeyListResponsePayload(
            FfiConverterSequenceTypePubKeyInfo.read(buf),
        )
    }

    override fun allocationSize(value: KeyListResponsePayload) =
        (
            FfiConverterSequenceTypePubKeyInfo.allocationSize(value.`listKeyinfo`)
        )

    override fun write(
        value: KeyListResponsePayload,
        buf: ByteBuffer,
    ) {
        FfiConverterSequenceTypePubKeyInfo.write(value.`listKeyinfo`, buf)
    }
}

data class PubKeyInfo(
    var `serverPubkey`: kotlin.String,
    var `txN`: kotlin.UInt,
    var `updatedAt`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypePubKeyInfo : FfiConverterRustBuffer<PubKeyInfo> {
    override fun read(buf: ByteBuffer): PubKeyInfo {
        return PubKeyInfo(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: PubKeyInfo) =
        (
            FfiConverterString.allocationSize(value.`serverPubkey`) +
                FfiConverterUInt.allocationSize(value.`txN`) +
                FfiConverterString.allocationSize(value.`updatedAt`)
        )

    override fun write(
        value: PubKeyInfo,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`serverPubkey`, buf)
        FfiConverterUInt.write(value.`txN`, buf)
        FfiConverterString.write(value.`updatedAt`, buf)
    }
}

@Serializable
data class ServerConfig(
    var `initlock`: kotlin.UInt,
    var `interval`: kotlin.UInt,
) {
    companion object
}

public object FfiConverterTypeServerConfig : FfiConverterRustBuffer<ServerConfig> {
    override fun read(buf: ByteBuffer): ServerConfig {
        return ServerConfig(
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: ServerConfig) =
        (
            FfiConverterUInt.allocationSize(value.`initlock`) +
                FfiConverterUInt.allocationSize(value.`interval`)
        )

    override fun write(
        value: ServerConfig,
        buf: ByteBuffer,
    ) {
        FfiConverterUInt.write(value.`initlock`, buf)
        FfiConverterUInt.write(value.`interval`, buf)
    }
}

@Serializable
data class Settings(
    var `network`: kotlin.String,
    var `blockExplorerUrl`: kotlin.String?,
    var `torProxyHost`: kotlin.String?,
    var `torProxyPort`: kotlin.String?,
    var `torProxyControlPassword`: kotlin.String?,
    var `torProxyControlPort`: kotlin.String?,
    var `statechainEntityApi`: kotlin.String,
    var `torStatechainEntityApi`: kotlin.String?,
    var `electrumProtocol`: kotlin.String,
    var `electrumHost`: kotlin.String,
    var `electrumPort`: kotlin.String,
    var `electrumType`: kotlin.String,
    var `notifications`: kotlin.Boolean,
    var `tutorials`: kotlin.Boolean,
) {
    companion object
}

public object FfiConverterTypeSettings : FfiConverterRustBuffer<Settings> {
    override fun read(buf: ByteBuffer): Settings {
        return Settings(
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Settings) =
        (
            FfiConverterString.allocationSize(value.`network`) +
                FfiConverterOptionalString.allocationSize(value.`blockExplorerUrl`) +
                FfiConverterOptionalString.allocationSize(value.`torProxyHost`) +
                FfiConverterOptionalString.allocationSize(value.`torProxyPort`) +
                FfiConverterOptionalString.allocationSize(value.`torProxyControlPassword`) +
                FfiConverterOptionalString.allocationSize(value.`torProxyControlPort`) +
                FfiConverterString.allocationSize(value.`statechainEntityApi`) +
                FfiConverterOptionalString.allocationSize(value.`torStatechainEntityApi`) +
                FfiConverterString.allocationSize(value.`electrumProtocol`) +
                FfiConverterString.allocationSize(value.`electrumHost`) +
                FfiConverterString.allocationSize(value.`electrumPort`) +
                FfiConverterString.allocationSize(value.`electrumType`) +
                FfiConverterBoolean.allocationSize(value.`notifications`) +
                FfiConverterBoolean.allocationSize(value.`tutorials`)
        )

    override fun write(
        value: Settings,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`network`, buf)
        FfiConverterOptionalString.write(value.`blockExplorerUrl`, buf)
        FfiConverterOptionalString.write(value.`torProxyHost`, buf)
        FfiConverterOptionalString.write(value.`torProxyPort`, buf)
        FfiConverterOptionalString.write(value.`torProxyControlPassword`, buf)
        FfiConverterOptionalString.write(value.`torProxyControlPort`, buf)
        FfiConverterString.write(value.`statechainEntityApi`, buf)
        FfiConverterOptionalString.write(value.`torStatechainEntityApi`, buf)
        FfiConverterString.write(value.`electrumProtocol`, buf)
        FfiConverterString.write(value.`electrumHost`, buf)
        FfiConverterString.write(value.`electrumPort`, buf)
        FfiConverterString.write(value.`electrumType`, buf)
        FfiConverterBoolean.write(value.`notifications`, buf)
        FfiConverterBoolean.write(value.`tutorials`, buf)
    }
}

data class StatechainBackupTxs(
    var `statechainId`: kotlin.String,
    var `backupTxs`: List<BackupTx>,
) {
    companion object
}

public object FfiConverterTypeStatechainBackupTxs : FfiConverterRustBuffer<StatechainBackupTxs> {
    override fun read(buf: ByteBuffer): StatechainBackupTxs {
        return StatechainBackupTxs(
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeBackupTx.read(buf),
        )
    }

    override fun allocationSize(value: StatechainBackupTxs) =
        (
            FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterSequenceTypeBackupTx.allocationSize(value.`backupTxs`)
        )

    override fun write(
        value: StatechainBackupTxs,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterSequenceTypeBackupTx.write(value.`backupTxs`, buf)
    }
}

@Serializable
data class Token(
    var `btcPaymentAddress`: kotlin.String,
    var `fee`: kotlin.String,
    var `lightningInvoice`: kotlin.String,
    var `processorId`: kotlin.String,
    var `tokenId`: kotlin.String,
    var `confirmed`: kotlin.Boolean,
    var `spent`: kotlin.Boolean,
    var `expiry`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeToken : FfiConverterRustBuffer<Token> {
    override fun read(buf: ByteBuffer): Token {
        return Token(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Token) =
        (
            FfiConverterString.allocationSize(value.`btcPaymentAddress`) +
                FfiConverterString.allocationSize(value.`fee`) +
                FfiConverterString.allocationSize(value.`lightningInvoice`) +
                FfiConverterString.allocationSize(value.`processorId`) +
                FfiConverterString.allocationSize(value.`tokenId`) +
                FfiConverterBoolean.allocationSize(value.`confirmed`) +
                FfiConverterBoolean.allocationSize(value.`spent`) +
                FfiConverterString.allocationSize(value.`expiry`)
        )

    override fun write(
        value: Token,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`btcPaymentAddress`, buf)
        FfiConverterString.write(value.`fee`, buf)
        FfiConverterString.write(value.`lightningInvoice`, buf)
        FfiConverterString.write(value.`processorId`, buf)
        FfiConverterString.write(value.`tokenId`, buf)
        FfiConverterBoolean.write(value.`confirmed`, buf)
        FfiConverterBoolean.write(value.`spent`, buf)
        FfiConverterString.write(value.`expiry`, buf)
    }
}

@Serializable
data class Wallet(
    var `name`: kotlin.String,
    var `mnemonic`: kotlin.String,
    var `version`: kotlin.String,
    var `stateEntityEndpoint`: kotlin.String,
    var `electrumEndpoint`: kotlin.String,
    var `network`: kotlin.String,
    var `blockheight`: kotlin.UInt,
    var `initlock`: kotlin.UInt,
    var `interval`: kotlin.UInt,
    var `tokens`: List<Token>,
    var `activities`: List<Activity>,
    var `coins`: List<Coin>,
    var `settings`: Settings,
) {
    companion object
}

public object FfiConverterTypeWallet : FfiConverterRustBuffer<Wallet> {
    override fun read(buf: ByteBuffer): Wallet {
        return Wallet(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterSequenceTypeToken.read(buf),
            FfiConverterSequenceTypeActivity.read(buf),
            FfiConverterSequenceTypeCoin.read(buf),
            FfiConverterTypeSettings.read(buf),
        )
    }

    override fun allocationSize(value: Wallet) =
        (
            FfiConverterString.allocationSize(value.`name`) +
                FfiConverterString.allocationSize(value.`mnemonic`) +
                FfiConverterString.allocationSize(value.`version`) +
                FfiConverterString.allocationSize(value.`stateEntityEndpoint`) +
                FfiConverterString.allocationSize(value.`electrumEndpoint`) +
                FfiConverterString.allocationSize(value.`network`) +
                FfiConverterUInt.allocationSize(value.`blockheight`) +
                FfiConverterUInt.allocationSize(value.`initlock`) +
                FfiConverterUInt.allocationSize(value.`interval`) +
                FfiConverterSequenceTypeToken.allocationSize(value.`tokens`) +
                FfiConverterSequenceTypeActivity.allocationSize(value.`activities`) +
                FfiConverterSequenceTypeCoin.allocationSize(value.`coins`) +
                FfiConverterTypeSettings.allocationSize(value.`settings`)
        )

    override fun write(
        value: Wallet,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`name`, buf)
        FfiConverterString.write(value.`mnemonic`, buf)
        FfiConverterString.write(value.`version`, buf)
        FfiConverterString.write(value.`stateEntityEndpoint`, buf)
        FfiConverterString.write(value.`electrumEndpoint`, buf)
        FfiConverterString.write(value.`network`, buf)
        FfiConverterUInt.write(value.`blockheight`, buf)
        FfiConverterUInt.write(value.`initlock`, buf)
        FfiConverterUInt.write(value.`interval`, buf)
        FfiConverterSequenceTypeToken.write(value.`tokens`, buf)
        FfiConverterSequenceTypeActivity.write(value.`activities`, buf)
        FfiConverterSequenceTypeCoin.write(value.`coins`, buf)
        FfiConverterTypeSettings.write(value.`settings`, buf)
    }
}

enum class CoinStatus {
    INITIALISED,
    IN_MEMPOOL,
    UNCONFIRMED,
    CONFIRMED,
    IN_TRANSFER,
    WITHDRAWING,
    TRANSFERRED,
    WITHDRAWN,
    ;

    companion object
}

public object FfiConverterTypeCoinStatus : FfiConverterRustBuffer<CoinStatus> {
    override fun read(buf: ByteBuffer) =
        try {
            CoinStatus.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: CoinStatus) = 4UL

    override fun write(
        value: CoinStatus,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

sealed class MercuryException : Exception() {
    class Bip39Exception() : MercuryException() {
        override val message
            get() = ""
    }

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<MercuryException> {
        override fun lift(error_buf: RustBuffer.ByValue): MercuryException = FfiConverterTypeMercuryError.lift(error_buf)
    }
}

public object FfiConverterTypeMercuryError : FfiConverterRustBuffer<MercuryException> {
    override fun read(buf: ByteBuffer): MercuryException {
        return when (buf.getInt()) {
            1 -> MercuryException.Bip39Exception()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: MercuryException): ULong {
        return when (value) {
            is MercuryException.Bip39Exception -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(
        value: MercuryException,
        buf: ByteBuffer,
    ) {
            when (value) {
            is MercuryException.Bip39Exception -> {
                buf.putInt(1)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

public object FfiConverterOptionalUInt : FfiConverterRustBuffer<kotlin.UInt?> {
    override fun read(buf: ByteBuffer): kotlin.UInt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUInt.read(buf)
    }

    override fun allocationSize(value: kotlin.UInt?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterUInt.allocationSize(value)
        }
    }

    override fun write(
        value: kotlin.UInt?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUInt.write(value, buf)
        }
    }
}

public object FfiConverterOptionalString : FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(
        value: kotlin.String?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}

public object FfiConverterSequenceTypeActivity : FfiConverterRustBuffer<List<Activity>> {
    override fun read(buf: ByteBuffer): List<Activity> {
        val len = buf.getInt()
        return List<Activity>(len) {
            FfiConverterTypeActivity.read(buf)
        }
    }

    override fun allocationSize(value: List<Activity>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeActivity.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<Activity>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeActivity.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeBackupTx : FfiConverterRustBuffer<List<BackupTx>> {
    override fun read(buf: ByteBuffer): List<BackupTx> {
        val len = buf.getInt()
        return List<BackupTx>(len) {
            FfiConverterTypeBackupTx.read(buf)
        }
    }

    override fun allocationSize(value: List<BackupTx>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeBackupTx.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<BackupTx>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeBackupTx.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeCoin : FfiConverterRustBuffer<List<Coin>> {
    override fun read(buf: ByteBuffer): List<Coin> {
        val len = buf.getInt()
        return List<Coin>(len) {
            FfiConverterTypeCoin.read(buf)
        }
    }

    override fun allocationSize(value: List<Coin>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeCoin.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<Coin>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeCoin.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypePubKeyInfo : FfiConverterRustBuffer<List<PubKeyInfo>> {
    override fun read(buf: ByteBuffer): List<PubKeyInfo> {
        val len = buf.getInt()
        return List<PubKeyInfo>(len) {
            FfiConverterTypePubKeyInfo.read(buf)
        }
    }

    override fun allocationSize(value: List<PubKeyInfo>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypePubKeyInfo.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<PubKeyInfo>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypePubKeyInfo.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeToken : FfiConverterRustBuffer<List<Token>> {
    override fun read(buf: ByteBuffer): List<Token> {
        val len = buf.getInt()
        return List<Token>(len) {
            FfiConverterTypeToken.read(buf)
        }
    }

    override fun allocationSize(value: List<Token>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeToken.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<Token>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeToken.write(it, buf)
        }
    }
}

@Throws(MercuryException::class)
fun `generateMnemonic`(): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_generate_mnemonic(
                _status,
            )
        },
    )
}
